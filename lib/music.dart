import 'package:flutter/material.dart';import 'package:flutter/rendering.dart';import 'package:music/player.dart';import 'package:on_audio_query/on_audio_query.dart';import 'package:permission_handler/permission_handler.dart';class Music extends StatefulWidget {  const Music({Key? key}) : super(key: key);  @override  State<Music> createState() => _MusicState();}class _MusicState extends State<Music> {  final _audioQuery = OnAudioQuery();  late ScrollController _scrollViewController;  bool _showAppbar = true;  bool isScrollingDown = true;  @override void initState(){    super.initState();    requestPermission();    _scrollViewController = ScrollController();    _scrollViewController.addListener(() {      if (_scrollViewController.position.userScrollDirection == ScrollDirection.reverse) {        if (!isScrollingDown) {          setState(() {            isScrollingDown = true;            _showAppbar = false;          });        }      }      if (_scrollViewController.position.userScrollDirection == ScrollDirection.forward) {        if (isScrollingDown) {          setState(() {            isScrollingDown = false;            _showAppbar = true;          });        }      }    });  }  @override  void dispose() {    _scrollViewController.dispose();    _scrollViewController.removeListener(() {});    super.dispose();  }  @override  Widget build(BuildContext context) {    return Scaffold(      extendBodyBehindAppBar: true,      extendBody: true,      appBar: AppBar(        elevation: 0.0,        backgroundColor: Colors.transparent,        title:    AnimatedContainer(        height: _showAppbar ? 40.0 : 0.0,        duration: const Duration(milliseconds: 300),        child:  Center(child: Text('My Music'))      )),      body: Stack(children: [        Container(             decoration: const BoxDecoration(               gradient: LinearGradient(                   begin: Alignment.topCenter,                   end: Alignment.bottomCenter,                            colors: [                     Color(0xff302b63),                     Color(0xff08061d),               ])             ),        ) ,        Center(          child: FutureBuilder<List<SongModel>>(            future: _audioQuery.querySongs(              sortType: SongSortType.DATE_ADDED,              orderType: OrderType.ASC_OR_SMALLER,              uriType: UriType.EXTERNAL,              ignoreCase: true,            ),            builder: (context,Data){              if(Data.data==null){                return const Center(child: CircularProgressIndicator(),);              }              if(Data.data?.isEmpty==null){                return const Center(child: Text("No Song Found"),);              }              else{                return ListView.builder(                    controller: _scrollViewController,                    itemCount: Data.data!.length,                    itemBuilder: (context,index){                      return Padding(                        padding: const EdgeInsets.only(top: 8.0),                        child: ListTile(                          onTap: (){                            Navigator.push(context,                                MaterialPageRoute(builder: (context)=>Player(Data.data![index]))); },                          title: Text(Data.data![index].displayName,style: const TextStyle(color: Colors.white,fontSize: 14),),                          subtitle:  Text(Data.data![index].album.toString(),style: TextStyle(color: Colors.white.withOpacity(0.8),fontSize: 12),),                          trailing: Column(                            mainAxisAlignment: MainAxisAlignment.spaceEvenly,                            crossAxisAlignment: CrossAxisAlignment.center,                            children: [                            Image.asset("assets/images/play.png",height: 25,width: 25,),                            Text("${(Data.data![index].duration!*0.00001).toStringAsFixed(2)}"),                          ],),                          leading: Container(child: Padding(                            padding: const EdgeInsets.only(bottom: 8.0),                            child: QueryArtworkWidget(                              id: Data.data![index].id,                              type: ArtworkType.AUDIO,                              artworkFit: BoxFit.cover,                              quality: 80,                              keepOldArtwork: true,                            ),                          )),                        ),                      );                    });              }            },          ),        )      ],)    );  }  void requestPermission() async{    var status = await Permission.storage.status;    if (status.isDenied) {      Permission.storage.request();    }    if (await Permission.location.isRestricted) {      Permission.storage.request();    }  }}